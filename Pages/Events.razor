@page "/events"
@using EventEase_app.Models
@using EventEase_app.Services
@using EventEase_app.Components
@using Microsoft.AspNetCore.Components
@inject EventService EventService
@inject NavigationManager Navigation

<div class="events-header">
    <h1>All Events</h1>
    <p>Browse through our comprehensive list of upcoming events</p>
</div>

<div class="search-filters">
    <div class="search-box">
        <input type="text" @bind="searchTerm" @onkeyup="FilterEvents" 
               placeholder="Search events..." class="form-control" />
    </div>
    <div class="filter-buttons">
        <button class="btn @(selectedFilter == "all" ? "btn-primary" : "btn-outline-primary")"
                @onclick='() => FilterByType("all")'>
            All Events
        </button>
        <button class="btn @(selectedFilter == "free" ? "btn-primary" : "btn-outline-primary")"
                @onclick='() => FilterByType("free")'>
            Free Events
        </button>
        <button class="btn @(selectedFilter == "paid" ? "btn-primary" : "btn-outline-primary")"
                @onclick='() => FilterByType("paid")'>
            Paid Events
        </button>
    </div>
</div>

<div class="events-container">
    @if (filteredEvents != null && filteredEvents.Any())
    {
        <div class="events-grid">
            @foreach (var eventItem in filteredEvents)
            {
                <EventCard EventData="@eventItem" 
                          OnViewDetails="HandleViewDetails" 
                          OnRegister="HandleRegister" />
            }
        </div>
    }
    else if (filteredEvents != null)
    {
        <div class="no-events">
            <h3>No events found</h3>
            <p>Try adjusting your search terms or filters.</p>
        </div>
    }
    else
    {
        <div class="loading">
            <p>Loading events...</p>
        </div>
    }
</div>

@code {
    private List<Event>? allEvents;
    private List<Event>? filteredEvents;
    private string searchTerm = "";
    private string selectedFilter = "all";

    protected override async Task OnInitializedAsync()
    {
        allEvents = await EventService.GetEventsAsync();
        filteredEvents = allEvents;
    }

    private void FilterEvents()
    {
        if (allEvents == null) return;

        var filtered = allEvents.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(e => 
                e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.Location.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Apply type filter
        filtered = selectedFilter switch
        {
            "free" => filtered.Where(e => e.Price == 0),
            "paid" => filtered.Where(e => e.Price > 0),
            _ => filtered
        };

        filteredEvents = filtered.ToList();
        StateHasChanged();
    }

    private void FilterByType(string filter)
    {
        selectedFilter = filter;
        FilterEvents();
    }

    private void HandleViewDetails(int eventId)
    {
        Navigation.NavigateTo($"/events/{eventId}");
    }

    private void HandleRegister(int eventId)
    {
        Navigation.NavigateTo($"/register/{eventId}");
    }
}

<style>
    .events-header {
        text-align: center;
        margin-bottom: 40px;
    }

    .events-header h1 {
        color: #333;
        margin-bottom: 8px;
        font-size: 2.5em;
    }

    .events-header p {
        color: #666;
        font-size: 1.1em;
    }

    .search-filters {
        margin-bottom: 30px;
        display: flex;
        flex-direction: column;
        gap: 16px;
        align-items: center;
    }

    .search-box {
        width: 100%;
        max-width: 400px;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1em;
    }

    .filter-buttons {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
        justify-content: center;
    }

    .btn {
        padding: 8px 16px;
        border: 1px solid #007bff;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        text-decoration: none;
        display: inline-block;
        transition: all 0.2s;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-outline-primary {
        background-color: transparent;
        color: #007bff;
    }

    .btn:hover {
        background-color: #0056b3;
        color: white;
        border-color: #0056b3;
    }

    .events-container {
        min-height: 400px;
    }

    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 24px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .no-events, .loading {
        text-align: center;
        padding: 60px 20px;
        color: #666;
    }

    .no-events h3 {
        margin-bottom: 12px;
        color: #333;
    }
</style>
